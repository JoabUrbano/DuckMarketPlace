IMPLEMENTATION DuckMarketPlace_i
    
REFINES DuckMarketPlace
    
VALUES
    NOMEPRODUTO = 0..9;
    IDPRODUTO = 0..9;
    IDUSUARIO = 0..9;
    NOMEUSUARIO = 0..9;
    userDummy = 0;
    productDummy = 0;
    userIdDummy = 0;
    productIdDummy = 0;
    MAX_PURCHASE = 15
    
CONCRETE_VARIABLES
    usuarios_i,
    active_users,
    dividausuario_i,
    dividausuario_aberta_i,
    usuariosinativos_i,
    usersInactive,

    creditousuario_i,

    totalPriceCart_i,
    userIdsUsed_i,

    produtos_i,
    precoproduto_i,
    estoque_i,
    dono_i,
    
    quantity,
    amount,
    amountProductInCart,
    quantityProductInCart,
    amountProductInLastPurchase,
    quantityProductInLastPurchase,
    purchaseUsers_i,
    amountPurchaseHistory,
    quantityPurchaseHistory,
    idPurchase_i,
    cartSeller_i,

    // Auxiliares
    allProducts,
    countAllProducts
    
    
INVARIANT
    usuarios_i : IDUSUARIO --> NOMEUSUARIO &
    dom(usuarios_i |>> {userDummy}) = dom(usuarios) &
    active_users : IDUSUARIO --> BOOL &

    usuariosinativos_i : IDUSUARIO --> NAT &
    usersInactive : IDUSUARIO --> BOOL &
    dom(usuariosinativos_i) /\ dom(usersInactive |> {TRUE}) = dom (usuariosinativos) &
    
    creditousuario_i : IDUSUARIO --> NAT &
    dom( active_users |> {TRUE} ) /\ dom(creditousuario_i) = dom(creditousuario) &
 
    totalPriceCart_i : IDUSUARIO --> NAT &
    dom(totalPriceCart_i |>> {0}) = dom(totalPriceCart) &
    
    userIdsUsed_i : IDUSUARIO --> BOOL &
    dom(userIdsUsed_i |> {TRUE}) = userIdsUsed &

    dividausuario_i : IDUSUARIO --> NAT &
    dividausuario_aberta_i : IDUSUARIO --> BOOL &
    dom(dividausuario_i) /\ dom(dividausuario_aberta_i |> {TRUE}) = dom(dividausuario) &

    /* ----- Produtos ----- */
    produtos_i : IDPRODUTO --> NOMEPRODUTO &
    dom(produtos_i |>> {productDummy}) = dom(produtos) &

    precoproduto_i : IDPRODUTO --> NAT &
    dom(precoproduto_i) /\ dom(produtos_i |>> {productDummy}) = dom(precoproduto) &
    
    estoque_i : IDPRODUTO --> NAT &
    dom(estoque_i) /\ dom(produtos_i |>> {productDummy}) = dom(estoque) &

    dono_i : IDPRODUTO --> IDUSUARIO &
    dom(dono_i |>> {userIdDummy}) = dom(dono) &
    
    quantity : IDUSUARIO * IDPRODUTO --> NAT &
    amount : IDUSUARIO * IDPRODUTO --> NAT &
    !(uu, pp).
    (uu:IDUSUARIO & pp:IDPRODUTO & uu : dom(lastPurchase) & pp : dom(lastPurchase(uu)) => 
        {quantity(uu, pp) |-> amount(uu, pp) } = lastPurchase(uu)(pp)) &
    
     amountProductInCart : IDUSUARIO * IDPRODUTO --> NAT &
     quantityProductInCart : IDUSUARIO * IDPRODUTO --> NAT &
    !(uu, pp).
    (uu:IDUSUARIO & pp:IDPRODUTO & uu : dom(cartContents) & pp : dom(cartContents(uu)) => 
        {quantityProductInCart(uu, pp) |-> amountProductInCart(uu, pp) } = cartContents(uu)(pp)) &
    
    amountProductInLastPurchase : IDUSUARIO * IDPRODUTO --> NAT &
    quantityProductInLastPurchase : IDUSUARIO * IDPRODUTO --> NAT &
    !(uu, pp).
    (uu:IDUSUARIO & pp:IDPRODUTO & uu : dom(lastPurchase) & pp : dom(lastPurchase(uu)) => 
        {amountProductInLastPurchase(uu, pp) |-> quantityProductInLastPurchase(uu, pp) } = lastPurchase(uu)(pp)) &
    
    idPurchase_i: 0..MAX_PURCHASE &
    idPurchase_i = idPurchase &
    
    purchaseUsers_i: 0..MAX_PURCHASE --> IDUSUARIO &
    0..(idPurchase_i - 1) = dom(purchaseUsers) &
    
    amountPurchaseHistory :  (0..MAX_PURCHASE) * IDPRODUTO --> NAT &
    quantityPurchaseHistory : (0..MAX_PURCHASE) * IDPRODUTO --> NAT &
    !(ip, pp).
    (ip:(0..MAX_PURCHASE) & pp:IDPRODUTO & ip : dom(purchaseHistory) & pp : dom(purchaseHistory(ip)) => 
        {quantityPurchaseHistory(ip, pp) |-> amountPurchaseHistory(ip, pp) } = purchaseHistory(ip)(pp)) &
    
    cartSeller_i: IDUSUARIO --> IDUSUARIO &
    dom( active_users |> {TRUE} ) /\ dom(cartSeller_i) = dom(cartSeller) &
    
        // Auxiliares
    allProducts : 0..9 --> IDPRODUTO &
    countAllProducts : NAT

INITIALISATION
    usuarios_i := IDUSUARIO*{userDummy};
    active_users := IDUSUARIO*{FALSE};
    
    dividausuario_i := IDUSUARIO*{0};
    dividausuario_aberta_i := IDUSUARIO*{FALSE};

    usuariosinativos_i := IDUSUARIO*{0};
    usersInactive := IDUSUARIO*{FALSE};

    creditousuario_i := IDUSUARIO*{0};

    totalPriceCart_i := IDUSUARIO*{0};
    userIdsUsed_i := IDUSUARIO*{FALSE};

    produtos_i := IDPRODUTO*{productDummy};
    precoproduto_i := IDPRODUTO*{0};
    estoque_i := IDPRODUTO*{0};
    dono_i := IDPRODUTO*{userIdDummy};
    
    quantity := IDUSUARIO * IDPRODUTO * {0};
    amount := IDUSUARIO * IDPRODUTO * {0};
    quantityProductInCart := IDUSUARIO * IDPRODUTO * {0};
    amountProductInCart := IDUSUARIO * IDPRODUTO * {0};
    amountProductInLastPurchase := IDUSUARIO * IDPRODUTO * {0};
    quantityProductInLastPurchase := IDUSUARIO * IDPRODUTO  * {0};
    purchaseUsers_i := (0..MAX_PURCHASE) * {userIdDummy};
    amountPurchaseHistory := (0..MAX_PURCHASE) * IDPRODUTO * {0};
    quantityPurchaseHistory := (0..MAX_PURCHASE) * IDPRODUTO * {0};
    idPurchase_i := 0;
    cartSeller_i := IDUSUARIO * {userIdDummy};
    
    //Auxiliares
    allProducts := (0..9)*{productIdDummy};
    countAllProducts := 0

OPERATIONS

    addUser(uu, nn, cc) = 
        BEGIN
            usuarios_i(uu) :=  nn;
            creditousuario_i(uu) := cc;
	    active_users(uu) := TRUE;
            totalPriceCart_i(uu) :=  0;
            userIdsUsed_i(uu) := TRUE 
        END;

    removeUser(uu) = 
        BEGIN
            usuarios_i(uu) := userDummy;
            totalPriceCart_i(uu) := 0;
	    active_users(uu) := FALSE;
	    VAR hasCredit IN
		hasCredit := creditousuario_i(uu);
		IF hasCredit >= 0 THEN
		    usuariosinativos_i(uu) := hasCredit;
		    usersInactive(uu) := TRUE
		END;
		creditousuario_i(uu) := 0;
		VAR index, range, dono_loop, pp IN
		    index := 0;
		    range := countAllProducts;
		    WHILE index < range DO
			pp := allProducts(index);
			dono_loop := dono_i(pp);
			IF dono_loop = uu THEN
			    produtos_i(pp) := productDummy;
	    		    estoque_i(pp) := 0;
	    		    precoproduto_i(pp) := 0
			END;
			index := index + 1
		    INVARIANT
			index : NAT &
			index <= range &
			range : NAT
		    VARIANT
			range - index
		    END
		END
	    END
        END; 


    altNameUser(uu, nn) =
        BEGIN
    	    usuarios_i(uu) := nn
        END;

    addCredit(uu, cc) =
        BEGIN
            creditousuario_i(uu) := creditousuario_i(uu) + cc
        END;

    withdrawCredit(uu, cc) = 
        BEGIN
	    creditousuario_i(uu) := creditousuario_i(uu) - cc
        END;

    addProduct(ii, nn, uu, qq, pp) = 
	BEGIN
	    produtos_i(ii) := nn;
	    dono_i(ii) := uu;
	    estoque_i(ii) := qq;
	    precoproduto_i(ii) := pp;
	    allProducts(countAllProducts) := ii;
	    countAllProducts := countAllProducts + 1
	END;

    removeProduct(ii)=
	BEGIN
	    produtos_i(ii) := productDummy;
	    estoque_i(ii) := 0;
	    precoproduto_i(ii) := 0
	END;
    
    altProductName(ii, nn) = 
        BEGIN
            produtos_i(ii) := nn
        END;        
    
    altProductStock(ii, qq) = 
        BEGIN
            estoque_i(ii) := qq            
        END;
    
    altProductPrice(ii, pp) = 
        BEGIN
            precoproduto_i(ii) := pp
        END;

    buyProduct(uu, pp, qq) = 
        BEGIN
            quantity(uu, pp) := qq;
            amount(uu, pp) := precoproduto_i(pp);
            amountPurchaseHistory(idPurchase_i, pp) := precoproduto_i(pp);
            quantityPurchaseHistory(idPurchase_i, pp) := qq;
            idPurchase_i := idPurchase_i + 1;
            
            VAR productOwner IN
                productOwner := dono_i(pp);   
                creditousuario_i(productOwner) := creditousuario_i(productOwner) +  (precoproduto_i(pp) * qq);
                creditousuario_i(uu) := creditousuario_i(uu) -  (precoproduto_i(pp) * qq)
            END;          
            estoque_i(pp) := estoque_i(pp)  - qq
        END;
        
    returnProduct(uu, pp, rr, qq) = 
        BEGIN
                VAR ownerProduct IN
                    ownerProduct := dono_i(pp);
                    dividausuario_i(ownerProduct) := dividausuario_i(ownerProduct) + (qq * rr)
                END;
               
                creditousuario_i(uu) := creditousuario_i(uu) + (qq * rr);
                
                quantity(uu, pp) :=  quantity(uu, pp) - qq;
               
                VAR count, lastIdPurchaseUser, currentUserId IN
                    count := 0;
                    lastIdPurchaseUser := 0;
                    currentUserId := userIdDummy;
                    
                    WHILE count <= MAX_PURCHASE DO
                        currentUserId := purchaseUsers_i(count);
                        IF uu = currentUserId THEN
                            lastIdPurchaseUser := count
                        END;                        
                                            
                        count := count + 1
                    INVARIANT
                        count : NAT & lastIdPurchaseUser : NAT &  count <= MAX_PURCHASE & currentUserId : IDPRODUTO
                    VARIANT
                        MAX_PURCHASE - count
                    END;
                    
                    quantityPurchaseHistory(lastIdPurchaseUser, pp) := quantityPurchaseHistory(lastIdPurchaseUser, pp) - qq
                END;
                
                VAR productName IN
                     productName := produtos_i(pp);
                     IF productName /= productDummy THEN
                         estoque_i(pp) := estoque_i(pp) + qq
                    END
                END                
                    
        END;
        
    addProductToCart(uu, pp, qq) = 
        BEGIN
            cartSeller_i(uu) := dono_i(pp);
            quantityProductInCart(uu, pp) := quantityProductInCart(uu, pp) + qq;
            amountProductInCart(uu, pp) := precoproduto_i(pp);
            totalPriceCart_i(uu) := totalPriceCart_i(uu) + (precoproduto_i(pp) * qq);
            estoque_i(pp) := estoque_i(pp)  - qq
        END;
        
    removeProductFromCart(uu, pp, rr, qq) = 
        BEGIN
            quantityProductInCart(uu, pp) := quantityProductInCart(uu, pp) - qq;
            
            VAR quantityProduct IN
                quantityProduct := quantityProductInCart(uu, pp); 
                IF quantityProduct = 0 THEN
                    amountProductInCart(uu, pp) := 0
                END
            END;
            
            totalPriceCart_i(uu) := totalPriceCart_i(uu) - (precoproduto_i(pp) * qq);
            
             VAR productName IN
                productName := produtos_i(pp);
                IF productName /= productDummy THEN
                    estoque_i(pp) := estoque_i(pp) + qq
                END
            END;
            
            
            VAR index, range, productWhile, haveNoProducts, quantityWhile IN
		        index := 0;
		        range := countAllProducts;
		        haveNoProducts := TRUE;
		        
		        WHILE index < range DO
			        productWhile := allProducts(index);
			        quantityWhile := quantityProductInCart(uu, productWhile);
			        IF quantityWhile > 0 THEN
			            haveNoProducts := FALSE
			        END;
			        index := index + 1
		        INVARIANT
			        index : NAT &
			        index <= range &
			        range : NAT
		        VARIANT
			        range - index
		        END;
		        
		        IF haveNoProducts =TRUE THEN
		            cartSeller_i(uu) := userIdDummy
                END
            END            
        END;   
        
    buyProductsFromCart(uu) = 
        BEGIN
            creditousuario_i(uu) := creditousuario_i(uu) - totalPriceCart_i(uu);
            creditousuario_i(cartSeller_i(uu)) :=  creditousuario_i(cartSeller_i(uu)) + totalPriceCart_i(uu);
            totalPriceCart_i(uu) := 0;
            
            VAR index, range, productWhile IN
		        index := 0;
		        range := countAllProducts;
		        
		        WHILE index < range DO
			        productWhile := allProducts(index);
			        quantityProductInLastPurchase(uu, productWhile) := quantityProductInCart(uu, productWhile);
			        amountProductInLastPurchase(uu, productWhile) := amountProductInCart(uu, productWhile);
			        quantityPurchaseHistory(idPurchase_i, productWhile) := quantityProductInCart(uu, productWhile);
			        amountPurchaseHistory(idPurchase_i, productWhile) := amountProductInCart(uu, productWhile);
			        quantityProductInCart (uu, productWhile):= 0;
			        amountProductInCart (uu, productWhile):= 0;
			        index := index + 1
		        INVARIANT
			        index : NAT &
			        index <= range &
			        range : NAT
		        VARIANT
			        range - index
		        END
            END;
            
            cartSeller_i(uu) := userIdDummy;
            
            purchaseUsers_i(idPurchase_i) := uu;
            
            idPurchase_i := idPurchase_i + 1
        END;        
    
    payDebt(uu) =
    BEGIN
        VAR divida, credito IN
        divida := dividausuario_i(uu);
        credito := creditousuario_i(uu);
            IF divida <= credito THEN
            creditousuario_i(uu) := credito - divida;
            dividausuario_i(uu) := 0;
            dividausuario_aberta_i(uu) := FALSE
            ELSE
            dividausuario_i(uu) := divida - credito
            END
        END
    END;

    payDebtWithCredit(uu, cc) =
    BEGIN
        VAR divida IN
        divida := dividausuario_i(uu);
            IF divida <= cc THEN
            dividausuario_i(uu) := 0;
            dividausuario_aberta_i(uu) := FALSE
            ELSE
            dividausuario_i(uu) := divida - cc
            END
        END
    END;

    withdrawInactiveCredit(uu) =
    BEGIN
        usuariosinativos_i(uu) := 0
    END;
    
    removeInactiveUser(uu) =
    BEGIN
        usersInactive(uu) := FALSE
    END;
    
    /* ----- Operações de query ----- */
    oo <-- showUserCredit(uu) =
	BEGIN
	    VAR isNotDummy IN
	        isNotDummy := usuarios_i(uu);
	           IF isNotDummy /= userDummy THEN
		        oo := creditousuario_i(uu)
	        END
	    END
	END;
	
    oo <-- showUserName(uu) = 
	BEGIN
	    VAR isDummy IN
	        isDummy := usuarios_i(uu);
	        IF isDummy /= userDummy THEN
		        oo := usuarios_i(uu)
	        END
	    END
	END;

	//Falta fazer ainda!!!!
    oo <-- showUserCartValue(uu) = 
        VAR isDummy IN
	        isDummy := usuarios_i(uu);
	        IF isDummy /= userDummy THEN
		        oo := totalPriceCart_i(uu)
	        END
	    END;
        
    oo <-- showUserDebt(uu) =
        VAR isDummy IN
	        isDummy := usuarios_i(uu);
	        IF isDummy /= userDummy THEN
		        oo := dividausuario_i(uu)
	        END
	    END;
    
    oo <-- showProductName(pp) =
	BEGIN
	    VAR isProductDummy IN
	        isProductDummy := produtos_i(pp);
	        IF isProductDummy /= productDummy THEN
		        oo := produtos_i(pp)
	        END
	    END
	END;

    oo <-- showProductStock(pp) =
	BEGIN
	    VAR isProductDummy IN
	        isProductDummy := produtos_i(pp);
	        IF isProductDummy /= productDummy THEN
		        oo := estoque_i(pp)
	        END
	    END
	END;

    oo <-- showProductPrice(pp) =
	BEGIN
	    VAR isProductDummy IN
	        isProductDummy := produtos_i(pp);
	        IF isProductDummy /= productDummy THEN
		        oo := precoproduto_i(pp)
	        END
	    END
	END;
    
    /* ----- Operações de pré condições ----- */
    oo <-- preAddUser(uu, nn, cc) = 
        VAR isUsed, isActived, name IN
            isUsed := userIdsUsed_i(uu);
	    isActived := active_users(uu);
	    name := usuarios_i(uu);
            IF  
		isUsed = FALSE &
		isActived = FALSE &
		nn /= userDummy &
		name = userDummy
	    THEN
                oo := TRUE
            ELSE 
                oo := FALSE
            END
        END;

    oo <-- preRemoveUser(uu) =
        VAR isUsed, isActived, name, hasDebt IN
            isUsed := userIdsUsed_i(uu);
	    isActived := active_users(uu);
	    name := usuarios_i(uu);
	    hasDebt :=  dividausuario_aberta_i(uu);
            IF  
		isUsed = TRUE &
		isActived = TRUE &
		name /= userDummy &
		hasDebt = FALSE
	    THEN
                oo := TRUE
            ELSE 
                oo := FALSE
            END
        END;
    
    oo <-- preAltNameUser(uu, nn) = 
        VAR exist IN
	    exist := usuarios_i(uu);
	    IF  exist /= userDummy & nn /= userDummy THEN
                oo := TRUE
            ELSE 
                oo := FALSE
            END
        END;
        
    oo <-- preAddCredit(uu, cc) =
	BEGIN
	    VAR isActived IN
                isActived := active_users(uu);
	        IF isActived = TRUE THEN
        	    oo := TRUE
		ELSE
		    oo := FALSE
    	        END
    	    END
	END;
	
    oo <-- preWithdrawCredit(uu, cc) =
	BEGIN
            VAR isActived IN
                isActived := active_users(uu);
    	        IF isActived = TRUE THEN
	            oo := TRUE
		ELSE
		    oo := FALSE
	        END
	    END
        END;

    oo <-- preAddProduct(ii, nn, uu, qq, pp) =
	BEGIN
	    VAR prudctIsDummy, donoIsDummy IN
		prudctIsDummy := produtos_i(ii);
		donoIsDummy := dono_i(ii);
		IF 
		    prudctIsDummy = productDummy &
		    donoIsDummy = userIdDummy &
		    uu /= userIdDummy &
		    nn /= productDummy &
		    ii /= productIdDummy
		THEN
		    oo := TRUE
		ELSE
		    oo := FALSE
		END
	    END
	END;
	
    oo <-- preRemoveProduct(ii) =
	BEGIN
	    VAR prudctIsDummy IN
		prudctIsDummy  := produtos_i(ii);
		IF prudctIsDummy /= productDummy THEN
		    oo := TRUE
		ELSE
		    oo := FALSE
		END
	    END
	END;
    
    oo <-- preAltProductName(ii, nn) = 
        VAR np IN
            np := produtos_i(ii);
            IF np /= productDummy & nn /= productDummy THEN
                oo := TRUE
            ELSE
                oo := FALSE
            END
        END;
    
    oo <-- preAltProductStock(ii, qq) = 
        VAR np IN
            np := produtos_i(ii);
            IF np /= productDummy THEN
                oo := TRUE
            ELSE
                oo := FALSE
            END
        END;
        
    oo <-- preAltProductPrice(ii, pp) = 
        VAR np IN
            np := produtos_i(ii);
            IF np /= productDummy THEN
                oo := TRUE
            ELSE
                oo := FALSE
            END
        END;
        
    oo <-- preBuyProduct(uu, pp, qq) = 
        VAR nu, np, dd, ee, pd, cu, cd, pdQq, cdPdQq IN
            nu := usuarios_i(uu);
            np := produtos_i(pp);
            dd := dono_i(pp);
            ee := estoque_i(pp);
            pd := precoproduto_i(pp);
            cu := creditousuario_i(uu);
            cd := creditousuario_i(dd);
            pdQq := pd * qq;
            cdPdQq := cd + (pd * qq);
            IF 
                nu /= userDummy & 
                np /= productDummy & 
                uu /= dd &
                qq > 0 &
                qq <= MAXINT &
                qq <=  ee &
                pdQq <= cu &
               cdPdQq <= MAXINT
            THEN
                oo := TRUE
            ELSE
                oo := FALSE
            END
        END;   
        
    oo <-- preReturnProduct(uu, pp, rr, qq) = 
        VAR nu, np, ee, pd, cu, qqEe, am, du, amDu IN
            nu := usuarios_i(uu);
            np := produtos_i(pp);
            ee := estoque_i(pp);
            pd := precoproduto_i(pp);
            cu := creditousuario_i(uu);
            qqEe := qq + ee;
            am := quantityProductInLastPurchase(uu, pp) * rr;
            du := dividausuario_i(dono_i(pp));
            amDu := du + am;
            IF 
                nu /= userDummy & 
                np /= productDummy & 
                rr <= MAXINT &
                qq > 0 &
                qq <= MAXINT &
                qqEe <= MAXINT &
                amDu <= MAXINT 
            THEN
                oo := TRUE
            ELSE
                oo := FALSE
            END
        END;
        
    oo <-- preAddProductToCart(uu, pp, qq) = 
        VAR nu, np, dd, ee, qpc, qccQq, cs, tp, ppd, newTotal IN
            nu := usuarios_i(uu);
            np := produtos_i(pp);
            dd := dono_i(pp);
            ee := estoque_i(pp);
            qpc := quantityProductInCart(uu, pp);
            qccQq := qq + qpc;
            cs := cartSeller_i(uu);
            tp := totalPriceCart_i(uu);
            ppd := precoproduto_i(pp);
            newTotal := tp + (qq * ppd);
            IF       
                nu /= userDummy & 
                np /= productDummy &
                qq > 0 &
                qq <= MAXINT &
                uu /= dd &
                qq <= ee &
                qccQq <= MAXINT &
                (cs = userIdDummy or cs = dd) &
                newTotal <= MAXINT                
             THEN
                oo := TRUE
            ELSE
                oo := FALSE
            END
        END;      
        
    oo <-- preRemoveProductFromCart(uu, pp, rr, qq) = 
        VAR nu, np, ee, qpc, qqEe  IN
            nu := usuarios_i(uu);
            np := produtos_i(pp);
            ee := estoque_i(pp);
            qpc := quantityProductInCart(uu, pp);
            qqEe := qq + ee;
            IF
                nu /= userDummy & 
                np /= productDummy &
                qq > 0 &
                qq <= MAXINT &
                rr <= MAXINT &
                qq <= qpc &
                qqEe <= MAXINT
            THEN
                oo := TRUE
            ELSE
                oo := FALSE
            END            
        END;     
        
    oo <-- preBuyProductsFromCart(uu) = 
        VAR cu, tp, cs, nd, cuCs, cuCsTp IN
            cu := creditousuario_i(uu);
            tp := totalPriceCart_i(uu);
            cs := cartSeller_i(uu);
            nd := usuarios_i(cs);
            cuCs := creditousuario_i(cs);
            cuCsTp := cuCs + tp;
            IF        
                cu >= tp &
                idPurchase_i < MAX_PURCHASE &
                nd /= userDummy &
                cuCsTp <= MAXINT
            THEN
                oo := TRUE
            ELSE
                oo := FALSE
            END            
        END;
        
    oo <-- prePayDebt(uu) =
	VAR inDebt, isActive IN
	    inDebt := dividausuario_aberta_i(uu);
	    isActive := usuarios_i(uu);
	    IF inDebt = TRUE & isActive /= userDummy THEN
		oo := TRUE
	    ELSE
		oo := FALSE
	    END
	END;

    oo <-- prePayDebtWithCredit(uu, cc) =
	VAR inDebt IN
	    inDebt := dividausuario_aberta_i(uu);
	    IF inDebt = TRUE THEN
		oo := TRUE
	    ELSE
		oo := FALSE
	    END
	END;

    oo <-- preWithdrawInactiveCredit(uu) =
	VAR hasCredit, isInactive IN
	    hasCredit := usuariosinativos_i(uu);
	    isInactive := usersInactive(uu);
	    IF hasCredit > 0 & isInactive = TRUE THEN
		oo := TRUE
	    ELSE
		oo := FALSE
	    END
	END;

    oo <-- preRemoveInactiveUser(uu) =
	VAR hasCredit, isInactive IN
	    hasCredit := usuariosinativos_i(uu);
	    isInactive := usersInactive(uu);
	    IF hasCredit <= 0 & isInactive = TRUE THEN
		oo := TRUE
	    ELSE
		oo := FALSE
	    END
	END
 END