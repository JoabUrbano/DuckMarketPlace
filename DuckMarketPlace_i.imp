IMPLEMENTATION DuckMarketPlace_i
    
REFINES DuckMarketPlace
    
VALUES
    NOMEPRODUTO = 0..9;
    IDPRODUTO = 0..9;
    IDUSUARIO = 0..9;
    NOMEUSUARIO = 0..9;
    userDummy = 0;
    productDummy = 0;
    userIdDummy = 0
    
CONCRETE_VARIABLES
    usuarios_i,
    active_users,
    dividausuario_i,
    dividausuario_aberta_i,
    usuariosinativos_i,
    usersInactive,

    creditousuario_i,

    totalPriceCart_i,
    userIdsUsed_i,

    produtos_i,
    precoproduto_i,
    estoque_i,
    dono_i,
    
    quantity,
    amount,
    amountProductInCart,
    quantityProductInCart,
    amountProductInLastPurchase,
    quantityProductInLastPurchase
    
    
INVARIANT
    usuarios_i : IDUSUARIO --> NOMEUSUARIO &
    dom(usuarios_i |>> {userDummy}) = dom(usuarios) &
    active_users : IDUSUARIO --> BOOL &

    usuariosinativos_i : IDUSUARIO --> NAT &
    usersInactive : IDUSUARIO --> BOOL &
    dom(usuariosinativos_i) /\ dom(usersInactive |> {TRUE}) = dom (usuariosinativos) &
    
    creditousuario_i : IDUSUARIO --> NAT &
    dom( active_users |> {TRUE} ) /\ dom(creditousuario_i) = dom(creditousuario) &
 
    totalPriceCart_i : IDUSUARIO --> NAT &
    dom(totalPriceCart_i |>> {0}) = dom(totalPriceCart) &
    
    userIdsUsed_i : IDUSUARIO --> BOOL &
    dom(userIdsUsed_i |> {TRUE}) = userIdsUsed &

    dividausuario_i : IDUSUARIO --> NAT &
    dividausuario_aberta_i : IDUSUARIO --> BOOL &
    dom(dividausuario_i) /\ dom(dividausuario_aberta_i |> {TRUE}) = dom(dividausuario) &

    /* ----- Produtos ----- */
    produtos_i : IDPRODUTO --> NOMEPRODUTO &
    dom(produtos_i |>> {productDummy}) = dom(produtos) &

    precoproduto_i : IDPRODUTO --> NAT &
    dom(precoproduto_i) /\ dom(produtos_i |>> {productDummy}) = dom(precoproduto) &
    
    estoque_i : IDPRODUTO --> NAT &
    dom(estoque_i) /\ dom(produtos_i |>> {productDummy}) = dom(estoque) &

    dono_i : IDPRODUTO --> IDUSUARIO &
    dom(dono_i |>> {userIdDummy}) = dom(dono) &
    
    quantity : IDUSUARIO * IDPRODUTO --> NAT &
    amount : IDUSUARIO * IDPRODUTO --> NAT &
    !(uu, pp).
    (uu:IDUSUARIO & pp:IDPRODUTO & uu : dom(lastPurchase) & pp : dom(lastPurchase(uu)) => 
        {quantity(uu, pp) |-> amount(uu, pp) } = lastPurchase(uu)(pp)) &
    
     amountProductInCart : IDUSUARIO * IDPRODUTO --> NAT &
     quantityProductInCart : IDUSUARIO * IDPRODUTO --> NAT &
    !(uu, pp).
    (uu:IDUSUARIO & pp:IDPRODUTO & uu : dom(cartContents) & pp : dom(cartContents(uu)) => 
        {quantityProductInCart(uu, pp) |-> amountProductInCart(uu, pp) } = cartContents(uu)(pp)) &
    
    amountProductInLastPurchase : IDUSUARIO * IDPRODUTO --> NAT &
    quantityProductInLastPurchase : IDUSUARIO * IDPRODUTO --> NAT &
    !(uu, pp).
    (uu:IDUSUARIO & pp:IDPRODUTO & uu : dom(lastPurchase) & pp : dom(lastPurchase(uu)) => 
        {amountProductInLastPurchase(uu, pp) |-> quantityProductInLastPurchase(uu, pp) } = lastPurchase(uu)(pp))
     
INITIALISATION
    usuarios_i := IDUSUARIO*{userDummy};
    active_users := IDUSUARIO*{FALSE};
    
    dividausuario_i := IDUSUARIO*{0};
    dividausuario_aberta_i := IDUSUARIO*{FALSE};

    usuariosinativos_i := IDUSUARIO*{0};
    usersInactive := IDUSUARIO*{FALSE};

    creditousuario_i := IDUSUARIO*{0};

    totalPriceCart_i := IDUSUARIO*{0};
    userIdsUsed_i := IDUSUARIO*{FALSE};

    produtos_i := IDPRODUTO*{productDummy};
    precoproduto_i := IDPRODUTO*{0};
    estoque_i := IDPRODUTO*{0};
    dono_i := IDPRODUTO*{userIdDummy};
    
    quantity := IDUSUARIO * IDPRODUTO * {0};
    amount := IDUSUARIO * IDPRODUTO * {0};
    quantityProductInCart := IDUSUARIO * IDPRODUTO * {0};
    amountProductInCart := IDUSUARIO * IDPRODUTO * {0};
    amountProductInLastPurchase := IDUSUARIO * IDPRODUTO * {0};
    quantityProductInLastPurchase := IDUSUARIO * IDPRODUTO  * {0}

OPERATIONS

    addUser(uu, nn, cc) = 
        BEGIN
            usuarios_i(uu) :=  nn;
            creditousuario_i(uu) := cc;
	    active_users(uu) := TRUE;
            totalPriceCart_i(uu) :=  0;
            userIdsUsed_i(uu) := TRUE
        END;

    removeUser(uu) = 
        BEGIN
            usuarios_i(uu) := userDummy;
            totalPriceCart_i(uu) := 0;
	    active_users(uu) := FALSE;
	    VAR hasCredit IN
		hasCredit := creditousuario_i(uu);
		IF hasCredit >= 0 THEN
		    usuariosinativos_i(uu) := hasCredit;
		    usersInactive(uu) := TRUE
		END;
		creditousuario_i(uu) := 0
		//Usar um loop para remover os produtos
	    END
            
        END;        

    altNameUser(uu, nn) =
        BEGIN
    	    usuarios_i(uu) := nn
        END;

    addCredit(uu, cc) =
        BEGIN
            creditousuario_i(uu) := creditousuario_i(uu) + cc
        END;

    withdrawCredit(uu, cc) = 
        BEGIN
	    creditousuario_i(uu) := creditousuario_i(uu) - cc
        END;

    addProduct(ii, nn, uu, qq, pp) = 
	BEGIN
	    produtos_i(ii) := nn;
	    dono_i(ii) := uu;
	    estoque_i(ii) := qq;
	    precoproduto_i(ii) := pp
	END;

    removeProduct(ii)=
	BEGIN
	    produtos_i(ii) := productDummy;
	    estoque_i(ii) := 0;
	    precoproduto_i(ii) := 0
	END;
    
    altProductName(ii, nn) = 
        BEGIN
            produtos_i(ii) := nn
        END;        
    
    altProductStock(ii, qq) = 
        BEGIN
            estoque_i(ii) := qq            
        END;
    
    altProductPrice(ii, pp) = 
        BEGIN
            precoproduto_i(ii) := pp
        END;
        //Falta fazer
    buyProduct(uu, pp, qq) = skip;
    returnProduct(uu, pp, rr, qq) = skip;
    addProductToCart(uu, pp, qq) = skip;
    removeProductFromCart(uu, pp, rr, qq) = skip;
    buyProductsFromCart(uu) = skip;
    
    payDebt(uu) =
	BEGIN
	    VAR divida, credito IN
		divida := dividausuario_i(uu);
		credito := creditousuario_i(uu);
	    	IF divida <= credito THEN
		    creditousuario_i(uu) := credito - divida;
		    dividausuario_i(uu) := 0;
		    dividausuario_aberta_i(uu) := FALSE
	        ELSE
		    dividausuario_i(uu) := divida - credito
	        END
	    END
	END;

    payDebtWithCredit(uu, cc) =
	BEGIN
	    VAR divida IN
		divida := dividausuario_i(uu);
	    	IF divida <= cc THEN
		    dividausuario_i(uu) := 0;
		    dividausuario_aberta_i(uu) := FALSE
	        ELSE
		    dividausuario_i(uu) := divida - cc
	        END
	    END
	END;

    withdrawInactiveCredit(uu) =
	BEGIN
	    usuariosinativos_i(uu) := 0
	END;
    removeInactiveUser(uu) =
	BEGIN
	    usersInactive(uu) := FALSE
	END;
    
    /* ----- Operações de query ----- */
    oo <-- showUserCredit(uu) =
	BEGIN
	    VAR isNotDummy IN
	        isNotDummy := usuarios_i(uu);
	           IF isNotDummy /= userDummy THEN
		        oo := creditousuario_i(uu)
	        END
	    END
	END;
    oo <-- showUserName(uu) = 
	BEGIN
	    VAR isDummy IN
	        isDummy := usuarios_i(uu);
	        IF isDummy /= userDummy THEN
		        oo := usuarios_i(uu)
	        END
	    END
	END;

	//Falta fazer ainda!!!!
    oo <-- showUserCartValue(uu) = skip;
    oo <-- showUserDebt(uu) = skip;
    
    oo <-- showProductName(pp) =
	BEGIN
	    VAR isProductDummy IN
	        isProductDummy := produtos_i(pp);
	        IF isProductDummy /= productDummy THEN
		        oo := produtos_i(pp)
	        END
	    END
	END;

    oo <-- showProductStock(pp) =
	BEGIN
	    VAR isProductDummy IN
	        isProductDummy := produtos_i(pp);
	        IF isProductDummy /= productDummy THEN
		        oo := estoque_i(pp)
	        END
	    END
	END;

    oo <-- showProductPrice(pp) =
	BEGIN
	    VAR isProductDummy IN
	        isProductDummy := produtos_i(pp);
	        IF isProductDummy /= productDummy THEN
		        oo := precoproduto_i(pp)
	        END
	    END
	END;
    
    /* ----- Operações de pré condições ----- */
    oo <-- preAddUser(uu, nn, cc) = 
        VAR isUsed, isActived, name IN
            isUsed := userIdsUsed_i(uu);
	    isActived := active_users(uu);
	    name := usuarios_i(uu);
            IF  
		isUsed = FALSE &
		isActived = FALSE &
		nn /= userDummy &
		name = userDummy
	    THEN
                oo := TRUE
            ELSE 
                oo := FALSE
            END
        END;

    oo <-- preRemoveUser(uu) =
        VAR isUsed, isActived, name IN
            isUsed := userIdsUsed_i(uu);
	    isActived := active_users(uu);
	    name := usuarios_i(uu);
            IF  
		isUsed = TRUE &
		isActived = TRUE &
		name /= userDummy
	    THEN
                oo := TRUE
            ELSE 
                oo := FALSE
            END
        END;
    
    oo <-- preAltNameUser(uu, nn) = 
        VAR exist IN
	    exist := usuarios_i(uu);
	    IF  exist /= userDummy & nn /= userDummy THEN
                oo := TRUE
            ELSE 
                oo := FALSE
            END
        END;
        
    oo <-- preAddCredit(uu, cc) =
	BEGIN
	    VAR isActived IN
                isActived := active_users(uu);
	        IF isActived = TRUE THEN
        	    oo := TRUE
		ELSE
		    oo := FALSE
    	        END
    	    END
	END;
    oo <-- preWithdrawCredit(uu, cc) =
	BEGIN
            VAR isActived IN
                isActived := active_users(uu);
    	        IF isActived = TRUE THEN
	            oo := TRUE
		ELSE
		    oo := FALSE
	        END
	    END
        END;

    oo <-- preAddProduct(ii, nn, uu, qq, pp) =
	BEGIN
	    VAR prudctIsDummy, donoIsDummy IN
		prudctIsDummy  := produtos_i(ii);
		donoIsDummy :=  dono_i(ii);
		IF 
		    prudctIsDummy = productDummy &
		    donoIsDummy = userIdDummy &
		    uu /= userIdDummy &
		    nn /= productDummy
		THEN
		    oo := TRUE
		ELSE
		    oo := FALSE
		END
	    END
	END;
    oo <-- preRemoveProduct(ii) =
	BEGIN
	    VAR prudctIsDummy IN
		prudctIsDummy  := produtos_i(ii);
		IF prudctIsDummy /= productDummy THEN
		    oo := TRUE
		ELSE
		    oo := FALSE
		END
	    END
	END;
    
    oo <-- preAltProductName(ii, nn) = 
        VAR np IN
            np := produtos_i(ii);
            IF np /= productDummy & nn /= productDummy THEN
                oo := TRUE
            ELSE
                oo := FALSE
            END
        END;
    
    oo <-- preAltProductStock(ii, qq) = 
        VAR np IN
            np := produtos_i(ii);
            IF np /= productDummy THEN
                oo := TRUE
            ELSE
                oo := FALSE
            END
        END;
        
    oo <-- preAltProductPrice(ii, pp) = 
        VAR np IN
            np := produtos_i(ii);
            IF np /= productDummy THEN
                oo := TRUE
            ELSE
                oo := FALSE
            END
        END;
        // Falta fazer!!!!
    oo <-- preBuyProduct(uu, pp, qq) = skip;
    oo <-- preReturnProduct(uu, pp, rr, qq) = skip;
    oo <-- preAddProductToCart(uu, pp, qq) = skip;
    oo <-- preRemoveProductFromCart(uu, pp, rr, qq) = skip;
    oo <-- preBuyProductsFromCart(uu) = skip;
    
    oo <-- prePayDebt(uu) =
	VAR inDebt, isActive IN
	    inDebt := dividausuario_aberta_i(uu);
	    isActive := usuarios_i(uu);
	    IF inDebt = TRUE & isActive /= userDummy THEN
		oo := TRUE
	    ELSE
		oo := FALSE
	    END
	END;

    oo <-- prePayDebtWithCredit(uu, cc) =
	VAR inDebt IN
	    inDebt := dividausuario_aberta_i(uu);
	    IF inDebt = TRUE THEN
		oo := TRUE
	    ELSE
		oo := FALSE
	    END
	END;

    oo <-- preWithdrawInactiveCredit(uu) =
	VAR hasCredit, isInactive IN
	    hasCredit := usuariosinativos_i(uu);
	    isInactive := usersInactive(uu);
	    IF hasCredit > 0 & isInactive = TRUE THEN
		oo := TRUE
	    ELSE
		oo := FALSE
	    END
	END;

    oo <-- preRemoveInactiveUser(uu) =
	VAR hasCredit, isInactive IN
	    hasCredit := usuariosinativos_i(uu);
	    isInactive := usersInactive(uu);
	    IF hasCredit <= 0 & isInactive = TRUE THEN
		oo := TRUE
	    ELSE
		oo := FALSE
	    END
	END
 END